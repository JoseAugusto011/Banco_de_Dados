import mysql.connector

class Database:
    def __init__(self, host, user, password, database):
        self.conn = mysql.connector.connect(
            host=host,
            user=user,
            password=password,
            database=database
        )
        self.cursor = self.conn.cursor()
        
    def get_connection_id(self):
        return self.conn.connection_id

    def create_tables(self):
        # Tabela PratoTipico
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS PratoTipico (
                id INT AUTO_INCREMENT PRIMARY KEY,
                nome VARCHAR(255),
                descricao TEXT,
                preco FLOAT,
                categoria VARCHAR(50),
                regiaoOrigem VARCHAR(100),
                disponibilidade BOOLEAN
            )
        """)

        # Tabela Cliente
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS Cliente (
                id INT AUTO_INCREMENT PRIMARY KEY,
                nome VARCHAR(255),
                email VARCHAR(255),
                telefone VARCHAR(20),
                torceFlamengo TINYINT(1),
                assisteOnePiece TINYINT(1),
                cidade VARCHAR(100)
            )
        """)

        # Tabela ItemVenda
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS ItemVenda (
                id INT AUTO_INCREMENT PRIMARY KEY,
                pratoTipico_id INT,
                quantidade INT,
                valorUnitario FLOAT,
                FOREIGN KEY (pratoTipico_id) REFERENCES PratoTipico(id)
            )
        """)

        # Tabela Venda
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS Venda (
                id INT AUTO_INCREMENT PRIMARY KEY,
                cliente_id INT,
                vendedor VARCHAR(255),
                formaPagamento VARCHAR(50),
                statusPagamento VARCHAR(50),
                data DATE,
                FOREIGN KEY (cliente_id) REFERENCES Cliente(id)
            )
        """)

    def adicionar_stored_procedure(self):
        try:
            # Definição da stored procedure
            self.cursor.execute("""
                CREATE PROCEDURE IF NOT EXISTS Atualizar_Disponibilidade (IN prato_id INT, IN nova_quantidade INT)
                BEGIN
                    UPDATE PratoTipico SET disponibilidade = (nova_quantidade > 0) WHERE id = prato_id;
                END
            """)
            self.conn.commit()
            print("Stored procedure adicionada com sucesso.")
        except Exception as e:
            print("Erro ao adicionar a stored procedure:", e)

    def remover_stored_procedure(self):
        try:
            # Remoção da stored procedure
            self.cursor.execute("DROP PROCEDURE IF EXISTS Atualizar_Disponibilidade")
            self.conn.commit()
            print("Stored procedure removida com sucesso.")
        except Exception as e:
            print("Erro ao remover a stored procedure:", e)
    
    def create_view(db):
        try:
            # Criação da view para listar as vendas realizadas
            query = """
            CREATE VIEW VendasRealizadas AS
            SELECT Venda.id AS venda_id, Cliente.nome AS cliente_nome, Venda.vendedor, Venda.formaPagamento, Venda.statusPagamento, Venda.data
            FROM Venda
            JOIN Cliente ON Venda.cliente_id = Cliente.id
            """
            db.cursor.execute(query)
            db.conn.commit()
            print("View 'VendasRealizadas' criada com sucesso!")
        except Exception as e:
            print("Erro ao criar a view 'VendasRealizadas':", e)

    
    def close_connection(self):
        self.conn.close()

class PratoTipico:
    def __init__(self, nome, descricao, preco, categoria, regiaoOrigem, disponibilidade=True):
        self.nome = nome
        self.descricao = descricao
        self.preco = preco
        self.categoria = categoria
        self.regiaoOrigem = regiaoOrigem
        self.disponibilidade = disponibilidade
        print("Prato típico criado com sucesso!")

    def inserir(self, db):
        try:
            print("Inserindo prato típico...")
            query = "INSERT INTO PratoTipico (nome, descricao, preco, categoria, regiaoOrigem, disponibilidade) VALUES (%s, %s, %s, %s, %s, %s)"
            values = (self.nome, self.descricao, self.preco, self.categoria, self.regiaoOrigem, self.disponibilidade)
            db.cursor.execute(query, values)
            db.conn.commit()
            print("Prato típico inserido com sucesso!")
        except Exception as e:
            return e

    @staticmethod
    def pesquisar_por_nome(db, nome):
        
        try:
            query = "SELECT * FROM PratoTipico WHERE nome = %s"
            db.cursor.execute(query, (nome,))
            return db.cursor.fetchall()
        except Exception as e:
            print(e)
            return None
        
    def pesquisar_por_categoria(db, categoria):
        
        try:
            query = "SELECT * FROM PratoTipico WHERE categoria = %s"
            db.cursor.execute(query, (categoria,))
            return db.cursor.fetchall()
        except Exception as e:
            print(e)
            return None
    
    def pesquisar_por_regiaoOrigem(db, regiaoOrigem):
        
        try:
            query = "SELECT * FROM PratoTipico WHERE regiaoOrigem = %s"
            db.cursor.execute(query, (regiaoOrigem,))
            return db.cursor.fetchall()
        except Exception as e:
            print(e)
            return None
        
    def pesquisar_por_preco(db, preco):
        try :
            query = "SELECT * FROM PratoTipico WHERE preco = %s"
            db.cursor.execute(query, (preco,))
            return db.cursor.fetchall()
        except Exception as e:
           print(e)
           return None
       
    def pesquisar_por_categoria_regiaoOrigem(db, categoria, regiaoOrigem):
        
        try:
            query = "SELECT * FROM PratoTipico WHERE categoria = %s AND regiaoOrigem = %s"
            db.cursor.execute(query, (categoria, regiaoOrigem))
            return db.cursor.fetchall()
        except Exception as e:
            print(e)
            return None
    
    # Busca entre um intervalo de preços
    
    def pesquisar_por_preco_intervalo(db, preco1, preco2):
        
        try:
            query = "SELECT * FROM PratoTipico WHERE preco >= %s AND preco <= %s"
            db.cursor.execute(query, (preco1, preco2))
            return db.cursor.fetchall()
        except Exception as e:
            print(e)
            return None
        
    def pesquisar_produtos_qtd_menor_que_5(db):
        
        try:
            query = "SELECT * FROM PratoTipico WHERE quantidade < 5"
            db.cursor.execute(query)
            return db.cursor.fetchall()
        except Exception as e:
            print(e)
            return None

    # metodos de atualização
    
    def atualizar_nome(db, id, nome):
        
        try:
            query = "UPDATE PratoTipico SET nome = %s WHERE id = %s"
            db.cursor.execute(query, (nome, id))
            db.conn.commit()
        except Exception as e:
            print(e)
            return None 
        
    def atualizar_descricao(db, id, descricao):
        
        try:
            query = "UPDATE PratoTipico SET descricao = %s WHERE id = %s"
            db.cursor.execute(query, (descricao, id))
            db.conn.commit()
            
        except Exception as e:
            print(e)
            return None
        
    def atualizar_preco(db, id, preco):
        
        try :
            query = "UPDATE PratoTipico SET preco = %s WHERE id = %s"
            db.cursor.execute(query, (preco, id))
            db.conn.commit()
            
        except Exception as e:
            
            print(e)
            return None
        
    def atualizar_categoria(db, id, categoria):
        
        try:
            query = "UPDATE PratoTipico SET categoria = %s WHERE id = %s"
            db.cursor.execute(query, (categoria, id))
            db.conn.commit()
            
        except Exception as e:
            print(e)
            return None
                
    def atualizar_regiaoOrigem(db, id, regiaoOrigem):
        
        try:
            query = "UPDATE PratoTipico SET regiaoOrigem = %s WHERE id = %s"
            db.cursor.execute(query, (regiaoOrigem, id))
            db.conn.commit()
            
        except Exception as e:
            
            print(e)
            return None
        
    def atualizar_quantidade(db, id, quantidade):
        
        try:
            query = "UPDATE PratoTipico SET quantidade = %s WHERE id = %s"
            db.cursor.execute(query, (quantidade, id))
            db.conn.commit()
            
            # Atualiza a disponibilidade do produto
            
            if quantidade == 0:
                query = "UPDATE PratoTipico SET disponibilidade = 0 WHERE id = %s"
                db.cursor.execute(query, (id,))
                db.conn.commit()
                
            
            
            
        except Exception as e:
            
            print(e)
            return None
        

    @staticmethod
    def listar_todos(db):
        try:
            print("\nListando todas as comidas típicas...")
            query = "SELECT * FROM PratoTipico"
            db.cursor.execute(query)
            return db.cursor.fetchall()
        except Exception as e:
            print("Erro ao listar todas as comidas típicas:", e)
            return None


    def frequencia_regiao(db):
        try:
            query = "SELECT regiaoOrigem, COUNT(*) FROM PratoTipico GROUP BY regiaoOrigem"
            db.cursor.execute(query)
            return db.cursor.fetchall()
        except Exception as e:
            print(e)
            return None

    def frequencia_categoria(db):
        
        try:
            query = "SELECT categoria, COUNT(*) FROM PratoTipico GROUP BY categoria"
            db.cursor.execute(query)
            return db.cursor.fetchall()
        
        except Exception as e:
            print(e)
            return None
        
    def frequencia_preco(db):
        
        try:
            query = "SELECT preco, COUNT(*) FROM PratoTipico GROUP BY preco"
            db.cursor.execute(query)
            return db.cursor.fetchall()
        
        except Exception as e:
            print(e)
            return None

    @staticmethod
    def remover(db, prato_id):
        try:
            query = "DELETE FROM PratoTipico WHERE id = %s"
            db.cursor.execute(query, (prato_id,))
            db.conn.commit()
            
        except Exception as e:
            print(e)
            return None

class Cliente:
    def __init__(self, nome, email, telefone, torceFlamengo, assisteOnePiece, cidade):
        self.nome = nome
        self.email = email
        self.telefone = telefone
        self.torceFlamengo = torceFlamengo
        self.assisteOnePiece = assisteOnePiece
        self.cidade = cidade

    def inserir(self, db):
        query = "INSERT INTO Cliente (nome, email, telefone, torceFlamengo, assisteOnePiece, cidade) VALUES (%s, %s, %s, %s, %s, %s)"
        values = (self.nome, self.email, self.telefone, self.torceFlamengo, self.assisteOnePiece, self.cidade)
        db.cursor.execute(query, values)
        db.conn.commit()

    @staticmethod
    def pesquisar_por_nome(db, nome):
        
        try:
            query = "SELECT * FROM Cliente WHERE nome = %s"
            db.cursor.execute(query, (nome,))
            return db.cursor.fetchall()
        except Exception as e:  
            print(e)
            return None
        
    @staticmethod
    def pesquisar_por_email(db, email):
        try:
            query = "SELECT * FROM Cliente WHERE email = %s"
            db.cursor.execute(query, (email,))
            return db.cursor.fetchall()
        except Exception as e:
            print(e)
            return None

    def pesquisar_por_cidade(db, cidade):
        try:
            query = "SELECT * FROM Cliente WHERE cidade = %s"
            db.cursor.execute(query, (cidade,))
            return db.cursor.fetchall()
        except Exception as e:
            print(e)
            return None
    
    def pesquisar_por_torceFlamengo(db, torceFlamengo):
        
        try:
            query = "SELECT * FROM Cliente WHERE torceFlamengo = %s"
            db.cursor.execute(query, (torceFlamengo,))
            return db.cursor.fetchall()
        except Exception as e:
            print(e)
            return None
        
    @staticmethod
    def listar_todos(db):
        try:
            query = "SELECT * FROM Cliente"
            db.cursor.execute(query)
            return db.cursor.fetchall()
        except Exception as e:
            print(e)
            return None

    @staticmethod
    def remover(db, cliente_id):
        
        try:
            query = "DELETE FROM Cliente WHERE id = %s"
            db.cursor.execute(query, (cliente_id,))
            db.conn.commit()            
        except Exception as e:
            return None

class Venda:
    def __init__(self, cliente, vendedor, formaPagamento, statusPagamento, data):
        self.cliente = cliente
        self.vendedor = vendedor
        self.formaPagamento = formaPagamento
        self.statusPagamento = statusPagamento
        self.data = data
        self.itens = []

    def adicionarItem(self, item):
        self.itens.append(item)

    def removerItem(self, item):
        self.itens.remove(item)

    def calcularTotal(self):
        total = 0
        for item in self.itens:
            total += item.quantidade * item.valorUnitario
        return total

    def verificar_disponibilidade_item(self, item):
        if not item.pratoTipico.disponibilidade:
            print(f"O item {item.pratoTipico.nome} não está disponível para compra.")
            return False
        return True

    def inserir(self, db):
    # Verificar a disponibilidade de todos os itens antes de inserir a venda
        for item in self.itens:
            if not self.verificar_disponibilidade_item(item):
                return

        try:
            # Salvando a venda
            query = "INSERT INTO Venda (cliente_id, vendedor, formaPagamento, statusPagamento, data) VALUES (%s, %s, %s, %s, %s)"
            values = (self.cliente, self.vendedor, self.formaPagamento, self.statusPagamento, self.data)
            db.cursor.execute(query, values)
            db.conn.commit()

            # Salvando os itens da venda e atualizando a quantidade disponível no estoque
            for item in self.itens:
                item.inserir(db, self.cliente)
                # Atualizando a quantidade disponível no estoque
                quantidade_disponivel = item.pratoTipico.quantidade - item.quantidade
                PratoTipico.atualizar_quantidade(db, item.pratoTipico.id, quantidade_disponivel)

        except Exception as e:
            print(e)


    @staticmethod
    def listar_todos(db):
        query = "SELECT * FROM Venda"
        db.cursor.execute(query)
        return db.cursor.fetchall()
    
    @staticmethod
    def relatorio(db):
        try:
            # Consulta para obter a região de origem mais frequente
            query_regiao = "SELECT regiaoOrigem, COUNT(*) AS qtd FROM PratoTipico JOIN ItemVenda ON PratoTipico.id = ItemVenda.pratoTipico_id GROUP BY regiaoOrigem ORDER BY qtd DESC LIMIT 1"
            db.cursor.execute(query_regiao)
            regiao_origem = db.cursor.fetchone()

            # Consulta para obter a categoria mais frequente
            query_categoria = "SELECT categoria, COUNT(*) AS qtd FROM PratoTipico JOIN ItemVenda ON PratoTipico.id = ItemVenda.pratoTipico_id GROUP BY categoria ORDER BY qtd DESC LIMIT 1"
            db.cursor.execute(query_categoria)
            categoria = db.cursor.fetchone()

            # Consulta para obter o preço mais frequente
            query_preco = "SELECT preco, COUNT(*) AS qtd FROM PratoTipico JOIN ItemVenda ON PratoTipico.id = ItemVenda.pratoTipico_id GROUP BY preco ORDER BY qtd DESC LIMIT 1"
            db.cursor.execute(query_preco)
            preco = db.cursor.fetchone()

            return {
                "regiao_origem_mais_frequente": regiao_origem,
                "categoria_mais_frequente": categoria,
                "preco_mais_frequente": preco
            }
        except Exception as e:
            print(e)
            return None

    @staticmethod
    def exibir_um(db, venda_id):
        query = "SELECT * FROM Venda WHERE id = %s"
        db.cursor.execute(query, (venda_id,))
        return db.cursor.fetchone()

    @staticmethod
    def remover(db, venda_id):
        query = "DELETE FROM Venda WHERE id = %s"
        db.cursor.execute(query, (venda_id,))
        db.conn.commit()
        
    @staticmethod
    def cliente_possui_desconto(cliente):
        return cliente.torceFlamengo or cliente.assisteOnePiece or cliente.cidade == "Sousa"


class ItemVenda:
    def __init__(self, pratoTipico, quantidade, valorUnitario):
        self.pratoTipico = pratoTipico
        self.quantidade = quantidade
        self.valorUnitario = valorUnitario
        # Calculando o preço total do item sem desconto
        self.preco = quantidade * valorUnitario
        # Inicializando o preço com desconto como None, para ser calculado posteriormente
        self.preco_com_desconto = None

    def calcular_preco_com_desconto(self, cliente):
        # Verificando se o cliente possui desconto
        if Venda.cliente_possui_desconto(cliente):
            # Aplicando um desconto de 10%
            desconto = 0.10
            self.preco_com_desconto = self.preco * (1 - desconto)
        else:
            # Se o cliente não possuir desconto, o preço com desconto é o mesmo que o preço sem desconto
            self.preco_com_desconto = self.preco

    def inserir(self, db, cliente=None):
        # Verificando a disponibilidade do item
        if not self.pratoTipico.disponibilidade:
            print(f"O item {self.pratoTipico.nome} não está disponível para compra.")
            return
        
        # Calculando o preço com desconto, se o cliente for fornecido
        if cliente:
            self.calcular_preco_com_desconto(cliente)
        # Inserindo o item de venda no banco de dados
        query = "INSERT INTO ItemVenda (pratoTipico_id, quantidade, valorUnitario, preco, preco_com_desconto) VALUES (%s, %s, %s, %s, %s)"
        values = (self.pratoTipico.id, self.quantidade, self.valorUnitario, self.preco, self.preco_com_desconto)
        db.cursor.execute(query, values)
        db.conn.commit()

    @staticmethod
    def remover(db, item_id):
        query = "DELETE FROM ItemVenda WHERE id = %s"
        db.cursor.execute(query, (item_id,))
        db.conn.commit()




if __name__ == "__main__":
    # Defina suas configurações de conexão ao banco de dados
    host = "localhost"
    user = "root"
    password = "jasbhisto"
    database = "food_db"

    # Criar uma instância do banco de dados e imprimir informações de conexão
    db = Database(host, user, password, database)
    print("Conexão ao banco de dados realizada com sucesso!")

    # Criar as tabelas necessárias no banco de dados, se ainda não existirem
    db.create_tables()

    # Adicionar alguns exemplos de comidas típicas
    exemplos_comidas = [
        ("Feijoada", "Prato típico brasileiro, feito com feijão preto, carne de porco e outros ingredientes.", 35.00, "Principal", "Brasil", True),
        ("Paella", "Prato espanhol à base de arroz, com frutos do mar e outras carnes.", 40.00, "Principal", "Espanha", True),
        ("Sushi", "Prato japonês, geralmente composto por arroz temperado e peixe cru.", 30.00, "Principal", "Japão", True),
        ("Churrasco", "Prato típico brasileiro, feito com carnes assadas na brasa.", 50.00, "Principal", "Brasil", True),
        ("Pizza Margherita", "Prato italiano, uma pizza simples com molho de tomate, queijo mozzarella e manjericão.", 25.00, "Principal", "Itália", True),
        # Adicione mais exemplos de comidas típicas aqui
    ]

    # Inserir os exemplos de comidas no banco de dados
    for nome, descricao, preco, categoria, regiaoOrigem, disponibilidade in exemplos_comidas:
        prato = PratoTipico(nome, descricao, preco, categoria, regiaoOrigem, disponibilidade)
        prato.inserir(db)

    print("Exemplos de comidas típicas adicionados com sucesso!")
    
    #Listar todas as comidas típicas
    print("Listando todas as comidas típicas:")
    t = PratoTipico.listar_todos(db)
    print(t)

    # Encerrar a conexão com o banco de dados
    db.close_connection()
    print("Conexão ao banco de dados encerrada com sucesso!")
